{"version":3,"file":"static/js/165.a76172ca.chunk.js","mappings":"oKACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA2G,0BCA3G,EAAyB,2BAAzB,EAA2D,yBAA3D,EAA6F,2B,mBCe7F,EATmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAWC,UACvBH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACH,UAPV,SAAAI,GAAC,OAAIA,EAAEC,SAAWJ,EAAaA,CAAS,EAOJK,GAAIT,EAAKK,SAAEN,EAAMW,QAGhE,ECbA,EAA0B,yBCU1B,EARgB,SAACX,GACb,OACIG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAYC,SACvBN,EAAMY,SAGnB,E,8BCFMC,EAAeC,EAAAA,KAAaC,MAAM,CACpCC,eAAgBF,EAAAA,KACXG,IAAI,IAAK,wNACTC,SAAS,oJAGZC,EAAiB,SAACnB,GAKpB,OACIG,EAAAA,EAAAA,KAACiB,EAAAA,GAAM,CACHC,cAAe,CAACL,eAAgBhB,EAAMsB,YACtCC,iBAAkBV,EAClBW,SARO,SAACC,GACZzB,EAAM0B,eAAeD,EAAOT,eAChC,EAMyBV,SAChB,SAAAqB,GAAA,IAAEC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAO,OACdC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAzB,SAAA,EACDH,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAC6B,EAAAA,GAAK,CAACC,GAAIC,EAAAA,GACJC,MAAOP,EAAOZ,eACda,QAASA,EAAQb,eACjBL,KAAK,iBACLyB,YAAY,kIAEvBjC,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,UAAQkC,KAAM,SAAS/B,SAAC,aAEzB,GAGvB,EA8BA,EA5BgB,SAACN,GAEb,IAAIsC,EAAkBtC,EAAMuC,YAAYC,QAAQC,KAC5C,SAAAC,GAAC,OAAKvC,EAAAA,EAAAA,KAACwC,EAAU,CAAChC,KAAM+B,EAAE/B,KAAMT,GAAIwC,EAAExC,IAAK,IAG3C0C,EAAkB5C,EAAMuC,YAAYM,SAASJ,KAC7C,SAAAK,GAAC,OAAK3C,EAAAA,EAAAA,KAAC4C,EAAO,CAACnC,QAASkC,EAAElC,SAAU,IAOxC,OACIkB,EAAAA,EAAAA,MAAA,OAAK1B,UAAWC,EAAYC,SAAA,EACxBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAiBC,SAC5BgC,KAELR,EAAAA,EAAAA,MAAA,OAAK1B,UAAWC,EAAaC,SAAA,EACzBH,EAAAA,EAAAA,KAAA,OAAAG,SAAMsC,KACNzC,EAAAA,EAAAA,KAACgB,EAAc,CAACG,WAAYtB,EAAMuC,YAAYS,eAC9BtB,eAZH,SAACuB,GACtBjD,EAAMkD,YAAYD,EACtB,SAcJ,E,8BCrDA,GAAeE,E,QAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAACC,GACnB,MAAO,CACHd,YAAac,EAAMd,YAE3B,GAG6B,CAACW,YAAaI,EAAAA,IACvCC,EAAAA,EAFJ,CAGEC,E","sources":["webpack://react_75/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react_75/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__MnCp1\",\"dialogsItems\":\"Dialogs_dialogsItems__UYFLi\",\"messages\":\"Dialogs_messages__PwUA9\"};","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"DialogItem_active__HbGPv\",\"item\":\"DialogItem_item__+7Js5\",\"dialog\":\"DialogItem_dialog__8RiXc\"};","import css from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst SelectClass = () => {\r\n    return x => x.isActive ? css.active : css.item;\r\n}\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={css.dialog}>\r\n            <NavLink className={SelectClass()} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__KI8Nn\"};","import css from './Message.module.css'\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={css.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import css from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {TextArea} from \"../common/FormsControl/FormsControl\";\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n    newMessageBody: Yup.string()\r\n        .max(150, 'Сообщение не должно превышать 150 символов')\r\n        .required('Поле должно быть заполнено!'),\r\n});\r\n\r\nconst AddMessageForm = (props) => {\r\n    const submit = (values) => {\r\n        props.onSubmitAction(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{newMessageBody: props.newMessage}}\r\n            validationSchema={SignupSchema}\r\n            onSubmit={submit}>\r\n            {({errors, touched}) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field as={TextArea}\r\n                               error={errors.newMessageBody}\r\n                               touched={touched.newMessageBody}\r\n                               name=\"newMessageBody\"\r\n                               placeholder='Введите свое сообщение'/>\r\n                    </div>\r\n                    <div>\r\n                        <button type={\"submit\"}>Send</button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>)\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(\r\n        d => (<DialogItem name={d.name} id={d.id}/>)\r\n    );\r\n\r\n    let messageElements = props.dialogsPage.messages.map(\r\n        m => (<Message message={m.message}/>)\r\n    )\r\n\r\n    let onSendMessageClick = (text) => {\r\n        props.sendMessage(text)\r\n    }\r\n\r\n    return (\r\n        <div className={css.dialogs}>\r\n            <div className={css.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={css.messages}>\r\n                <div>{messageElements}</div>\r\n                <AddMessageForm newMessage={props.dialogsPage.newMessageText}\r\n                                onSubmitAction={onSendMessageClick}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {sendMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {sendMessage: sendMessageActionCreator}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["props","path","id","_jsx","className","css","children","NavLink","x","isActive","to","name","message","SignupSchema","Yup","shape","newMessageBody","max","required","AddMessageForm","Formik","initialValues","newMessage","validationSchema","onSubmit","values","onSubmitAction","_ref","errors","touched","_jsxs","Form","Field","as","TextArea","error","placeholder","type","dialogsElements","dialogsPage","dialogs","map","d","DialogItem","messageElements","messages","m","Message","newMessageText","text","sendMessage","compose","connect","state","sendMessageActionCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}